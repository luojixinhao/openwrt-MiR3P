#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/wrt-bulder.yml
# Description: Build Wrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# 参考：https://docs.github.com/zh/actions/using-workflows/workflow-syntax-for-github-actions
# 磁盘不足参考：https://github.com/coolsnowwolf/lede/issues/11665
# 相关：
#      https://github.com/haiibo/OpenWrt
#      https://github.com/rrtft/ActionsBuildOpenWRT
#

name: 编译Wrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: '启用SSH连接(设置为：true)'
        required: false
        default: 'false'
      conf:
        description: '配置文件'
        required: true
        default: '.config'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 800
    
    steps:
    - name: 服务器信息
      run: |
        echo "注意⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理核心: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU逻辑核心: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: 优化磁盘空间
      uses: hugoalh/disk-space-optimizer-ghaction@main
      with:
        operate_async: "False"
        operate_sudo: "False"
        general_include: "False.+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: "False.+"
        docker_prune: "False"
        docker_clean: "False"
        apt_prune: "False"
        apt_clean: "False"
        homebrew_prune: "False"
        homebrew_clean: "False"
        npm_prune: "False"
        npm_clean: "False"
        os_swap: "False"

    - name: 扩充磁盘空间
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 1048
        temp-reserve-mb: 100
        swap-size-mb: 2024
        remove-dotnet: 'false'
        remove-android: 'false'
        remove-haskell: 'false'
        remove-codeql: 'false'
        remove-docker-images: 'false'

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force

        sudo apt-get -qq -y update
        sudo apt-get -qq -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git git-core gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply python3-docutils python3-pyelftools python3-dev python3-setuptools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev java-propose-classpath g++ file python3-distutils
        sudo apt-get -qq -y autoremove
        sudo apt-get -qq -y clean

        sudo -E systemctl daemon-reload

        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: 检出本仓库
      uses: actions/checkout@main

    - name: 创建变量及克隆源代码
      working-directory: ./
      run: |
        CONFIG_FILE=${{ github.event.inputs.conf }}
        CUSTOM_setIP=$(egrep '^# setIP:' $CONFIG_FILE | sed 's/# setIP:\s*//')
        [ -z $CUSTOM_setIP ] && CUSTOM_setIP=192.168.1.1
        CUSTOM_setMASK=$(egrep '^# setMASK:' $CONFIG_FILE | sed 's/# setMASK:\s*//')
        [ -z $CUSTOM_setMASK ] && CUSTOM_setMASK=$(echo $CUSTOM_setIP | sed 's/.[0-9]\{1,3\}$/.255/')
        [ -z $CUSTOM_setMASK ] && CUSTOM_setMASK=192.168.1.255
        CUSTOM_setCONFIG=$(egrep '^# setCONFIG:' $CONFIG_FILE | sed 's/# setCONFIG:\s*//')
        [ -z $CUSTOM_setCONFIG ] && CUSTOM_setCONFIG=wrt-v0.conf
        CUSTOM_setRepoURL=$(egrep '^# setRepoURL:' $CONFIG_FILE | sed 's/# setRepoURL:\s*//')
        [ -z $CUSTOM_setRepoURL ] && CUSTOM_setRepoURL=https://github.com/openwrt/openwrt
        CUSTOM_setRepoBRANCH=$(egrep '^# setRepoBRANCH:' $CONFIG_FILE | sed 's/# setRepoBRANCH:\s*//')
        [ -z $CUSTOM_setRepoBRANCH ] && CUSTOM_setRepoBRANCH=master
        CUSTOM_setTAG=$(egrep '^# setTAG:' $CONFIG_FILE | sed 's/# setTAG:\s*//')
        [ -z $CUSTOM_setTAG ] && CUSTOM_setTAG=SNAPSHOT
        CUSTOM_setUserPasswd=$(egrep '^# setUserPasswd:' $CONFIG_FILE | sed 's/# setUserPasswd:\s*//')
        [ -z $CUSTOM_setUserPasswd ] && CUSTOM_setUserPasswd="root()root()"
        CUSTOM_setTimeZone=$(egrep '^# setTimeZone:' $CONFIG_FILE | sed 's/# setTimeZone:\s*//')
        CUSTOM_setCacheToolchain=$(egrep '^# setCacheToolchain:' $CONFIG_FILE | sed 's/# setCacheToolchain:\s*//')
        CUSTOM_setUploadBin=$(egrep '^# setUploadBin:' $CONFIG_FILE | sed 's/# setUploadBin:\s*//')
        CUSTOM_setUploadFirmware=$(egrep '^# setUploadFirmware:' $CONFIG_FILE | sed 's/# setUploadFirmware:\s*//')
        CUSTOM_setUploadRelease=$(egrep '^# setUploadRelease:' $CONFIG_FILE | sed 's/# setUploadRelease:\s*//')
        CUSTOM_setRepoName=$(echo $CUSTOM_setRepoURL | awk -F '/' '{print $(NF)}' | awk -F '.' '{print $1}')
        DEVICE_TARGET=$(cat $CONFIG_FILE | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        DEVICE_SUBTARGET=$(cat $CONFIG_FILE | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' $CONFIG_FILE | sed -r 's/.*DEVICE_(.*)=y/\1/')

        sudo timedatectl set-timezone "$CUSTOM_setTimeZone"
        BULD_STARTTIME=$(date +"%Y%m%d%H%M")

        git clone -b $CUSTOM_setRepoBRANCH --single-branch --filter=blob:none $CUSTOM_setRepoURL wrtdir
        cd wrtdir
        git fetch origin
        if [ "$CUSTOM_setTAG" = "last" ]; then
          CUSTOM_setTAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        fi
        if [ -n "$CUSTOM_setTAG" -a "$CUSTOM_setTAG" != "SNAPSHOT" ]; then
          git checkout -f $CUSTOM_setTAG
        fi
        echo "最后提交："
        git log -1
        echo "总提交数："
        git rev-list --count --all
        git rev-list --count HEAD .
        ./scripts/getver.sh

        echo "当前目录（$PWD）磁盘空间："
        df -hT $PWD
        echo "配置文件(本->源)："
        cp ../$CONFIG_FILE .config
        echo "本仓目录："
        ls -al ../
        echo "源仓目录："
        ls -al

        Git_rCount=$(git rev-list --count --all)
        Git_vHash=$(git log --format='%H' -1 | cut -c1-10)
        Git_reVersion=$(./scripts/getver.sh)

        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        COMMIT_HASH=$(git show -s --date=short --format="Hash: %H")

        echo "BULD_STARTTIME=$BULD_STARTTIME" >> $GITHUB_ENV
        echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        echo "WRT_PATH=$PWD" >> $GITHUB_ENV
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        echo "Git_rCount=$Git_rCount" >> $GITHUB_ENV
        echo "Git_vHash=$Git_vHash" >> $GITHUB_ENV
        echo "Git_reVersion=$Git_reVersion" >> $GITHUB_ENV
        echo "CUSTOM_setRepoName=$CUSTOM_setRepoName" >> $GITHUB_ENV
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
        echo "CUSTOM_setIP=$CUSTOM_setIP" >> $GITHUB_ENV
        echo "CUSTOM_setMASK=$CUSTOM_setMASK" >> $GITHUB_ENV
        echo "CUSTOM_setCONFIG=$CUSTOM_setCONFIG" >> $GITHUB_ENV
        echo "CUSTOM_setRepoURL=$CUSTOM_setRepoURL" >> $GITHUB_ENV
        echo "CUSTOM_setRepoBRANCH=$CUSTOM_setRepoBRANCH" >> $GITHUB_ENV
        echo "CUSTOM_setTAG=$CUSTOM_setTAG" >> $GITHUB_ENV
        echo "CUSTOM_setUserPasswd=$CUSTOM_setUserPasswd" >> $GITHUB_ENV
        echo "CUSTOM_setTimeZone=$CUSTOM_setTimeZone" >> $GITHUB_ENV
        echo "CUSTOM_setCacheToolchain=$CUSTOM_setCacheToolchain" >> $GITHUB_ENV
        echo "CUSTOM_setUploadBin=$CUSTOM_setUploadBin" >> $GITHUB_ENV
        echo "CUSTOM_setUploadFirmware=$CUSTOM_setUploadFirmware" >> $GITHUB_ENV
        echo "CUSTOM_setUploadRelease=$CUSTOM_setUploadRelease" >> $GITHUB_ENV

        echo "BULD_STARTTIME：$BULD_STARTTIME"
        echo "CONFIG_FILE：$CONFIG_FILE"
        echo "WRT_PATH：$PWD"
        echo "COMMIT_AUTHOR：$COMMIT_AUTHOR"
        echo "COMMIT_DATE：$COMMIT_DATE"
        echo "COMMIT_MESSAGE：$COMMIT_MESSAGE"
        echo "COMMIT_HASH：$COMMIT_HASH"
        echo "Git_rCount：$Git_rCount"
        echo "Git_vHash：$Git_vHash"
        echo "Git_reVersion：$Git_reVersion"
        echo "DEVICE_TARGET：$DEVICE_TARGET"
        echo "DEVICE_SUBTARGET：$DEVICE_SUBTARGET"
        echo "DEVICE_NAME：$DEVICE_NAME"
        echo "CUSTOM_setRepoURL：$CUSTOM_setRepoURL"
        echo "CUSTOM_setRepoBRANCH：$CUSTOM_setRepoBRANCH"
        echo "CUSTOM_setTAG：$CUSTOM_setTAG"
        echo "CUSTOM_setRepoName：$CUSTOM_setRepoName"
        echo "CUSTOM_setIP：$CUSTOM_setIP"
        echo "CUSTOM_setMASK：$CUSTOM_setMASK"
        echo "CUSTOM_setCONFIG：$CUSTOM_setCONFIG"
        echo "CUSTOM_setUserPasswd：$CUSTOM_setUserPasswd"
        echo "CUSTOM_setTimeZone：$CUSTOM_setTimeZone"
        echo "CUSTOM_setCacheToolchain：$CUSTOM_setCacheToolchain"
        echo "CUSTOM_setUploadBin：$CUSTOM_setUploadBin"
        echo "CUSTOM_setUploadFirmware：$CUSTOM_setUploadFirmware"
        echo "CUSTOM_setUploadRelease：$CUSTOM_setUploadRelease"

        echo "修改IP前："
        grep -n 'lan) ipad=${ipaddr:-"192.168.[0-9]\{1,3\}.[0-9]\{1,3\}"} ;;' package/base-files/files/bin/config_generate
        grep -n 'default "192.168.[0-9]\{1,3\}.' package/base-files/image-config.in
        grep -n '/lib/preinit/00_preinit.conf' package/base-files/Makefile | egrep "PREINIT_IP|PREINIT_BROADCAST"

        echo "修改IP后："
        [ -n $CUSTOM_setIP ] && sed -i 's/lan) ipad=${ipaddr:-"192.168.[0-9]\{1,3\}.[0-9]\{1,3\}"} ;;/lan) ipad=${ipaddr:-"'"$CUSTOM_setIP"'"} ;;/g' package/base-files/files/bin/config_generate
        [ -n $CUSTOM_setIP ] && sed -i 's/default "192.168.[0-9]\{1,3\}.1/default "'"$CUSTOM_setIP"'/g' package/base-files/image-config.in
        [ -n $CUSTOM_setIP ] && sed -i 's/default "192.168.[0-9]\{1,3\}.255/default "'"$CUSTOM_setMASK"'/g' package/base-files/image-config.in
        [ -n $CUSTOM_setIP ] && sed -i "s#_IP),\"192.168.[0-9]\{1,3\}.1\")' >>\$(1)/lib/preinit/00_preinit.conf#_IP),\"$CUSTOM_setIP\")' >>\$(1)/lib/preinit/00_preinit.conf#g" package/base-files/Makefile
        [ -n $CUSTOM_setIP ] && sed -i "s#_BROADCAST),\"192.168.[0-9]\{1,3\}.255\")' >>\$(1)/lib/preinit/00_preinit.conf#_BROADCAST),\"$CUSTOM_setMASK\")' >>\$(1)/lib/preinit/00_preinit.conf#g" package/base-files/Makefile

        grep -n 'lan) ipad=${ipaddr:-"192.168.[0-9]\{1,3\}.[0-9]\{1,3\}"} ;;' package/base-files/files/bin/config_generate
        grep -n 'default "192.168.[0-9]\{1,3\}.' package/base-files/image-config.in
        grep -n '/lib/preinit/00_preinit.conf' package/base-files/Makefile | egrep "PREINIT_IP|PREINIT_BROADCAST"

        echo "默认开启WIFI："
        sed -i "s/.disabled='1'/.disabled='0'/g" package/network/config/wifi-scripts/files/lib/wifi/mac80211.uc
        sed -i "s/.ssid='OpenWrt'/.ssid='OpenWrt-MiR3P'/g" package/network/config/wifi-scripts/files/lib/wifi/mac80211.uc
        cat package/network/config/wifi-scripts/files/lib/wifi/mac80211.uc | grep ssid
        cat package/network/config/wifi-scripts/files/lib/wifi/mac80211.uc | grep encryption

    - name: 缓存工具链
      if: env.CUSTOM_setCacheToolchain == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.CUSTOM_setRepoName }}-${{ env.CUSTOM_setRepoBRANCH }}-${{ env.CUSTOM_setTAG }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.WRT_PATH }}

    - name: 加载自定义源
      run: |
        [ -e feeds.conf.default ] && cp feeds.conf.default $WRT_PATH/feeds.conf.default
        chmod +x ${{ env.CUSTOM_setRepoName }}-diy-part1.sh
        cd $WRT_PATH
        $GITHUB_WORKSPACE/${{ env.CUSTOM_setRepoName }}-diy-part1.sh
        cat feeds.conf.default

    - name: 更新源
      run: cd $WRT_PATH && ./scripts/feeds update -a

    - name: 安装源
      run: cd $WRT_PATH && ./scripts/feeds install -a

    - name: 加载自定义配置
      env:
        check: 0
      run: |
        [ -e files ] && mv files $WRT_PATH/files
        mkdir -p $WRT_PATH/files/etc/uci-defaults
        cp ${{ env.CUSTOM_setRepoName }}-diy-init.sh $WRT_PATH/files/etc/uci-defaults/99-init-settings
        cp ${{ env.CONFIG_FILE }} $WRT_PATH/.config
        chmod +x ${{ env.CUSTOM_setRepoName }}-diy-part2.sh
        cd $WRT_PATH
        head -n 60 .config
        $GITHUB_WORKSPACE/${{ env.CUSTOM_setRepoName }}-diy-part2.sh

    - name: SSH连接
      if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
      uses: P3TERX/ssh2actions@main
      timeout-minutes: 600
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: SSH连接2
      if: github.event.inputs.ssh == 'true2'
      uses: mxschmitt/action-tmate@master
      timeout-minutes: 600
      with:
        sudo: true
        limit-access-to-actor: false

    - name: 下载软件包
      id: package
      run: |
        cd $WRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 磁盘空间
      run: |
        pwd
        df -hT
        ls -al $WRT_PATH/
        ls -al $WRT_PATH/package/
        ls -al $WRT_PATH/feeds/

    - name: 编译固件
      timeout-minutes: 600
      id: compile
      run: |
        cd $WRT_PATH
        head -n 7 .config

        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

        BULD_ENDTIME=$(date +"%Y%m%d%H%M")
        echo "BULD_ENDTIME=$BULD_ENDTIME" >> $GITHUB_ENV
        echo "BULD_ENDTIME=$BULD_ENDTIME"

    - name: 磁盘使用空间
      if: (!cancelled())
      run: |
        pwd
        df -hT
        ls -al $WRT_PATH/
        ls -al $WRT_PATH/bin/
        ls -al $WRT_PATH/bin/targets/*/*
        ls -al $WRT_PATH/build_dir/
        ls -al $WRT_PATH/build_dir/target-mipsel_24kc_musl/

    - name: 上传整个bin目录
      if: steps.compile.outputs.status == 'success' && env.CUSTOM_setUploadBin == 'true'
      uses: actions/upload-artifact@main
      with:
        name: bin_${{ env.CUSTOM_setRepoName }}_${{ env.DEVICE_NAME }}_${{ env.BULD_STARTTIME }}_${{ env.CUSTOM_setCONFIG }}_${{ env.CUSTOM_setTAG }}(${{ env.Git_reVersion }})_${{ env.CUSTOM_setIP }}_${{ env.CUSTOM_setUserPasswd }}
        path: ${{ env.WRT_PATH }}/bin

    - name: 组织文件
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd $WRT_PATH/bin/targets/*/*
        cat sha256sums
        cp $WRT_PATH/.config build.conf
        cp $GITHUB_WORKSPACE/${{ env.CONFIG_FILE }} custom.conf
        mv -f $WRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf packages.tar.gz packages
        rm -rf packages
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$PWD"
        ls -al 
        ls -al $WRT_PATH/bin

    - name: 上传固件
      if: steps.compile.outputs.status == 'success' && env.CUSTOM_setUploadFirmware == 'true' && !cancelled()
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.CUSTOM_setRepoName }}_${{ env.DEVICE_NAME }}_${{ env.BULD_STARTTIME }}_${{ env.CUSTOM_setCONFIG }}_${{ env.CUSTOM_setTAG }}(${{ env.Git_reVersion }})_${{ env.CUSTOM_setIP }}_${{ env.CUSTOM_setUserPasswd }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: 发布固件
      if: steps.compile.outputs.status == 'success' && env.CUSTOM_setUploadRelease == 'true' && !cancelled()
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.CUSTOM_setRepoName }}_${{ env.DEVICE_NAME }}_${{ env.BULD_STARTTIME }}_${{ env.CUSTOM_setCONFIG }}_${{ env.CUSTOM_setTAG }}(${{ env.Git_reVersion }})
        allowUpdates: true
        tag: ${{ env.CUSTOM_setRepoName }}_${{ env.CUSTOM_setCONFIG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.DEVICE_NAME }}
          - ⚽ 固件源码: ${{ env.CUSTOM_setRepoURL }}
          - 💝 源码分支: ${{ env.CUSTOM_setRepoBRANCH }} / ${{ env.CUSTOM_setTAG }}
          - 🌐 默认后台地址: ${{ env.CUSTOM_setIP }}
          - 🔑 默认用户密码【后台用户(密码)SSH用户(密码)】: ${{ env.CUSTOM_setUserPasswd }}
          ### 🧊 固件版本
          - 固件编译前(${{ env.BULD_STARTTIME }})最后一次➦[主源码](${{ env.CUSTOM_setRepoURL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      if: false && !cancelled()
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: false && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 失败SSH
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@master
      timeout-minutes: 600
      with:
        sudo: true
        limit-access-to-actor: false

